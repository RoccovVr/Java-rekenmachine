package Rekenmachine;
import java.util.Arrays;
import java.util.regex.Pattern;
import java.util.LinkedList;
import java.util.ArrayList;


public class Stringsplitter {

    static final Character keer = '*';
    static final Character deel = '/';
    static final Character min = '-';
    static final Character plus = '+';
    static final Character haak_open = '(';
    static final Character haak_gesloten = ')';

    public ArrayList<String> splitter_multikar(String string, ArrayList<Character> splitkars){
        ArrayList<String> gesplit = new ArrayList<>();
        int splitindex = 0;

        for(int i = 0; i <= string.length()-1; i++){
            if(splitkars.contains(string.charAt(i)) ){
                String substring = string.substring(splitindex, i);
                if(substring.length() != 0){
                    gesplit.add(substring);
                }
                gesplit.add(string.substring(i,i+1));
                splitindex = i+1;
            }
        }

        String substr = string.substring(splitindex, string.length());
        if(substr.length()!= 0){
            gesplit.add(substr);
        }
        return(gesplit);
    }

    //split "2*1-3" in [2, *, 1, -, 3], maar de min wordt dus soms ten onrechte gesplit
    public ArrayList<String> stringsplitterOVDH(String str){
        Stringsplitter stringsplitobj = new Stringsplitter();
        ArrayList<Character> multikars = new ArrayList<>();
        multikars.add(keer);
        multikars.add(deel);
        multikars.add(plus);
        multikars.add(min);
        multikars.add(haak_gesloten);
        multikars.add(haak_open);

        ArrayList<String> gesplit = stringsplitobj.splitter_multikar(str, multikars);
        return(gesplit);
    }

    public ArrayList<String> stringsplitter_min_voor_haak(ArrayList<String> stringlijst) { //zet -( om naar -1*(
        int i = 0;
        while (i <= stringlijst.size() - 2) {
            if (stringlijst.get(i).equals("-") & stringlijst.get(i + 1).equals("(")) {
                stringlijst.add(i + 1, "*");
                stringlijst.add(i + 1, "1");
            }
            i++;
        }
        return (stringlijst);
    }

    public ArrayList<String> stringsplitter_min_dubbelzin(ArrayList<String> stringlijst) { //split geen negatieve getallen
        int i = 0;
        if (stringlijst.get(0).equals("-")){
            String nieuw_element = stringlijst.get(0) + stringlijst.get(1);
            for(int k=1; k <= 2; k++){
                stringlijst.remove(0);
            }
            stringlijst.add(0, nieuw_element);
        }
        i++;
        while(i <= stringlijst.size()-2){
            if(stringlijst.get(i).equals("-") & !stringlijst.get(i-1).matches("^\\d+$")){
                String nieuw_element = stringlijst.get(i) + stringlijst.get(i+1);
                for(int k=1; k <= 2; k++){
                    stringlijst.remove(i);
                }
                stringlijst.add(i, nieuw_element);
            }
            i++;
        }
        return(stringlijst);
    }


        /*
            }else {
                String nieuw_element = stringlijst.get(0) + stringlijst.get(1);
                stringlijst.remove(0);
                stringlijst.remove(0);
                stringlijst.add(0, nieuw_element);
                i++;
            }
        }
        while(i <= stringlijst.size()-2){
            if(stringlijst.get(i).equals("-")){
                if(stringlijst.get(i+1).equals("(")) {
                    String een = "1";
                    String keer = "*";
                    stringlijst.add(i+1, keer);
                    stringlijst.add(i+1, een);
                    i=i+3;
                }
                if(!stringlijst.get(i-1).matches("^\\d+$")){
                    String nieuw_element = stringlijst.get(i) + stringlijst.get(i+1);
                    for(int k=1; k <= 2; k++){
                        stringlijst.remove(i);
                    }
                    stringlijst.add(i, nieuw_element);
                }

            }else{
                i++;
            }
        }
        return(stringlijst);
    }
    */

    public ArrayList<String> stringsplitterOAVDH(String str){
        ArrayList<String> stringlijstOVDH = stringsplitterOVDH(str);
        ArrayList<String> stringlijstA1 = stringsplitter_min_voor_haak(stringlijstOVDH);
        ArrayList<String> stringlijstA2 = stringsplitter_min_dubbelzin(stringlijstA1);
        return(stringlijstA2);
    }
    public static void main(String[] args) {
        String teststring = "-90-(877+ 9)*(200)";
        Stringsplitter stringsplitobj = new Stringsplitter();
        System.out.println(stringsplitobj.stringsplitterOAVDH(teststring));
    }
}
