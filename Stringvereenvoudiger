package Rekenmachine;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.LinkedList;


public class Stringvereenvoudiger {

    public String[] verm_vereenvoudiger(String[] stringlijst){
        String[] stringlijst_nieuw = stringlijst;
        Stringsplitter stringsplit_obj = new Stringsplitter;
        ArrayList<Character> OAVDlijst = stringsplit_obj.OAVDlijst();
        
        ArrayList<Integer> plekken_plus;
        for(int i=0; i<=stringlijst.length-1; i++){
            
        } stringlijst){ //st is getal, +, -, *, / in [12, *, 39, - ...
            if(OAVDlijst.contains(st)){

            }
        }
    }

    //vind_tweede_kar("2+10+9", '+') geeft 4 als '+' in de characterlijst staat
    public int split_2e_kar(String str, LinkedList<Character> karlijst) {
        int teller = 0; //nog 0 keer kar1 of kar2 gezien
        for(int i = 0; i<= str.length(); i++) {
            if(karlijst.contains(str.charAt(i))) {
                teller++;
                if(teller == 2) {
                    return(i);
                }
            }
        }
        return(str.length());
    }

    // plus verwijderen(2+10+11) geeft 12.0/11
    public String plus_verwijderen_eenmalig(String str){
        LinkedList<Character> karlijst = new LinkedList<>();
        karlijst.add('+');

        String substring = str.substring(0, split_2e_kar(str, karlijst));
        Rekenen rekenobj = new Rekenen();
        Double substring_naar_double = rekenobj.resultaat_optel(substring);
        String double_naar_string = Double.toString(substring_naar_double);
        String str_nieuw = str.replaceFirst(Pattern.quote(substring), double_naar_string);
        return(str_nieuw);
    }

    public String min_verwijderen_eenmalig(String str){
        LinkedList<Character> karlijst = new LinkedList<>();
        karlijst.add('-');

        String substring = str.substring(0, split_2e_kar(str, karlijst));
        Rekenen rekenobj = new Rekenen();
        Double substring_naar_double = rekenobj.resultaat_aftrek(substring);
        String double_naar_string = Double.toString(substring_naar_double);
        String str_nieuw = str.replaceFirst(Pattern.quote(substring), double_naar_string);
        return(str_nieuw);
    }

    public String verm_verwijderen_eenmalig(String str){
        LinkedList<Character> karlijst = new LinkedList<>();
        karlijst.add('*');

        String substring = str.substring(0, split_2e_kar(str, karlijst));
        Rekenen rekenobj = new Rekenen();
        Double substring_naar_double = rekenobj.resultaat_verm(substring);
        String double_naar_string = Double.toString(substring_naar_double);
        String str_nieuw = str.replaceFirst(Pattern.quote(substring), double_naar_string);
        return(str_nieuw);
    }

    public String deel_verwijderen_eenmalig(String str){
        LinkedList<Character> karlijst = new LinkedList<>();
        karlijst.add('/');

        String substring = str.substring(0, split_2e_kar(str, karlijst));
        Rekenen rekenobj = new Rekenen();
        Double substring_naar_double = rekenobj.resultaat_deel(substring);
        String double_naar_string = Double.toString(substring_naar_double);
        String str_nieuw = str.replaceFirst(Pattern.quote(substring), double_naar_string);
        return(str_nieuw);
    }


    //aantal_bewerkers("2+3-4", [+-]) wordt "234"
    public int aantal_bewerkers(String str, LinkedList<Character> karlijst){
        int teller = 0; //nog geen bewerkers gezien
        for(int i = 0; i<= str.length()-1; i++){
            if(karlijst.contains(str.charAt(i))) {
                teller++;
            }
        }
        return(teller);
    }

    //bewerker_verwijderen_alles("2+3-4", [+-]) = "1"
    public String bewerker_verwijderen_alles(String str, LinkedList<Character> karlijst){
        String str_nieuw = str;
        Rekenen rekenobj = new Rekenen();

        int aantal = aantal_bewerkers(str, karlijst);
        while(str_nieuw.contains("+")){
            for(int i = 0; i<= str_nieuw.length()-1; i++){
                if(str_nieuw.charAt(i) == '+'){

                }
            }
        }
        for(int i = 1; i <= aantal-1; i++){
            str_nieuw = plus_verwijderen_eenmalig(str_nieuw);
        }
        return(Double.toString(rekenobj.resultaat_optel(str_nieuw)));
    }

    //"2+3+5" wordt "10"
    public String termen_vereenvoudiger(String str){
        LinkedList<Character> lijst_met_plusmin = new LinkedList<>();
        lijst_met_plusmin.add('+');
        lijst_met_plusmin.add('-');
        return(bewerker_verwijderen_alles(str, lijst_met_plusmin));
    }

    public static void main(String[] args) {
        Stringvereenvoudiger vereenv = new Stringvereenvoudiger();
        System.out.println(vereenv.termen_vereenvoudiger("2+5.1+3"));
    }
}

