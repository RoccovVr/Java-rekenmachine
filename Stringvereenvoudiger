package Rekenmachine;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Pattern;
import java.util.LinkedList;


public class Stringvereenvoudiger {

    //vereenvoudigt de stringlijst [2, /, 3, *, 4, +, 1] tot 2.67 + 1
    public ArrayList<String> verm_deel_vereenvoudiger(String[] stringlijst){
        ArrayList<String> stringlijst_nieuw = new ArrayList(Arrays.asList(stringlijst));

        Rekenen rekenobj = new Rekenen();

        int i =1;
        while(i <= stringlijst_nieuw.size()-2){
            //als hij * tegenkomt in [..., 3, *, 4, ...] dan maakt hij ervan: [..., 3*4, ...]
            if(stringlijst_nieuw.get(i) == "*" || stringlijst_nieuw.get(i)== "/"){
                String add_to_new1 = stringlijst_nieuw.get(i-1) + stringlijst_nieuw.get(i) + stringlijst_nieuw.get(i+1);
                String add_to_new2 = Double.toString(rekenobj.resultaat_VD(add_to_new1));
                for(int k=1; k<= 3; k++) {
                    stringlijst_nieuw.remove(i-1);
                }
                stringlijst_nieuw.add(i-1, add_to_new2);
            }else{
                i++;
            }
        }
        return(stringlijst_nieuw);
        }

    //vereenvoudigt de stringlijst [2, /, 3, *, 4, +, 1] tot 2.67 + 1
    public ArrayList<String> plus_min_vereenvoudiger(String[] stringlijst){
        ArrayList<String> stringlijst_nieuw = new ArrayList(Arrays.asList(stringlijst));

        Rekenen rekenobj = new Rekenen();

        int i =1;
        while(i <= stringlijst_nieuw.size()-2){
            //als hij * tegenkomt in [..., 3, +, 4, ...] dan maakt hij ervan: [..., 3+4, ...]
            if(stringlijst_nieuw.get(i) == "+" || stringlijst_nieuw.get(i)== "-"){
                String add_to_new1 = stringlijst_nieuw.get(i-1) + stringlijst_nieuw.get(i) + stringlijst_nieuw.get(i+1);
                String add_to_new2 = Double.toString(rekenobj.resultaat_OA(add_to_new1));
                for(int k=1; k<= 3; k++) {
                    stringlijst_nieuw.remove(i-1);
                }
                stringlijst_nieuw.add(i-1, add_to_new2);
            }else{
                i++;
            }
        }
        return(stringlijst_nieuw);
    }

    public String OAVD_vereenvoudiger(String[] stringlijst){
        Stringvereenvoudiger vereenv = new Stringvereenvoudiger();
        ArrayList<String> VD_verdrijf = vereenv.verm_deel_vereenvoudiger(stringlijst);
        String[] VD_verdrijf_array = VD_verdrijf.toArray(new String[VD_verdrijf.size()]);
        ArrayList<String> OA_verdrijf = vereenv.plus_min_vereenvoudiger(VD_verdrijf_array);
        return(OA_verdrijf.get(0));
    }

    public int[] hakenkoppel_te_verdrijven(String[] stringlijst){ //dus in ( a + (3 * b)) zijn de haken (, ) in 3*b
        //te verdrijven, dus indexen zijn 3,7
        ArrayList<String> stringlijst_nieuw = new ArrayList(Arrays.asList(stringlijst));
        int haak_open_index=0;
        int haak_gesloten_index=0;

        for(int i=0; i<= stringlijst.length -1; i++) {
            if (stringlijst[i] == "(") {
                haak_open_index = i;
            }
            if (stringlijst[i] == ")") {
                haak_gesloten_index = i;
                break;
            }
        }
        int[] koppel = {haak_open_index, haak_gesloten_index};
        return(koppel);
    }

    public String OAVDH_vereenvoudiger(String[] stringlijst){
        ArrayList<String> stringlijst_nieuw = new ArrayList(Arrays.asList(stringlijst));
        Stringvereenvoudiger vereenv = new Stringvereenvoudiger();

        while(stringlijst_nieuw.contains("(")){
            String[] stringlijst_nieuw_str = stringlijst_nieuw.toArray(new String[stringlijst_nieuw.size()]);
            int haak_open_index = vereenv.hakenkoppel_te_verdrijven(stringlijst_nieuw_str)[0];
            int haak_gesloten_index = vereenv.hakenkoppel_te_verdrijven(stringlijst_nieuw_str)[1];

            ArrayList<String> tussen_haken =
                    new ArrayList<String>(stringlijst_nieuw.subList(haak_open_index+1, haak_gesloten_index));
            String[] tussen_haken_str = tussen_haken.toArray(new String[tussen_haken.size()]);
            String tussen_haken_vereenv = vereenv.OAVD_vereenvoudiger(tussen_haken_str);

            for(int k = haak_open_index; k <= haak_gesloten_index; k++){
                stringlijst_nieuw.remove(haak_open_index);
            }
            stringlijst_nieuw.add(haak_open_index, tussen_haken_vereenv);
        }

        String[] stringlijst_nieuw_str = stringlijst_nieuw.toArray(new String[stringlijst_nieuw.size()]);
        return(OAVD_vereenvoudiger(stringlijst_nieuw_str));
    }

    public static void main(String[] args) {
        Stringvereenvoudiger vereenv = new Stringvereenvoudiger();
        String[] testlijst = {"(", "(", "3", "/", "4", ")", "-", "1", ")", "*", "6", "+", "9"};
        System.out.println(vereenv.OAVDH_vereenvoudiger(testlijst));
    }
}
